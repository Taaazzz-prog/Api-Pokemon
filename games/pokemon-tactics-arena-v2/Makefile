# Pokemon Tactics Arena v2 - Makefile
.PHONY: help build up down restart logs shell db-migrate db-import clean prune backup restore

# Variables
PROJECT_NAME = pokemon-tactics-arena-v2
DOCKER_COMPOSE = docker-compose
ENV_FILE = .env.production

# Couleurs
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m

# Commandes par d√©faut
help: ## Affiche l'aide
	@echo "${BLUE}Pokemon Tactics Arena v2 - Commandes Docker${NC}"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "${GREEN}%-20s${NC} %s\n", $$1, $$2}'

# Construction et d√©ploiement
build: ## Construit toutes les images Docker
	@echo "${BLUE}üî® Construction des images...${NC}"
	$(DOCKER_COMPOSE) build --no-cache

up: ## D√©marre tous les services
	@echo "${BLUE}üöÄ D√©marrage des services...${NC}"
	$(DOCKER_COMPOSE) up -d
	@echo "${GREEN}‚úÖ Services d√©marr√©s !${NC}"

down: ## Arr√™te tous les services
	@echo "${BLUE}üõë Arr√™t des services...${NC}"
	$(DOCKER_COMPOSE) down --remove-orphans

restart: down up ## Red√©marre tous les services

# D√©ploiement complet
deploy: ## D√©ploiement complet avec migrations
	@echo "${BLUE}üöÄ D√©ploiement complet...${NC}"
	@chmod +x deploy.sh
	@./deploy.sh

deploy-logs: ## D√©ploiement avec affichage des logs
	@echo "${BLUE}üöÄ D√©ploiement avec logs...${NC}"
	@chmod +x deploy.sh
	@./deploy.sh --logs

# Logs et monitoring
logs: ## Affiche les logs de tous les services
	$(DOCKER_COMPOSE) logs -f

logs-backend: ## Affiche les logs du backend
	$(DOCKER_COMPOSE) logs -f pokemon-backend

logs-frontend: ## Affiche les logs du frontend
	$(DOCKER_COMPOSE) logs -f pokemon-frontend

logs-db: ## Affiche les logs de la base de donn√©es
	$(DOCKER_COMPOSE) logs -f pokemon-mysql

# Acc√®s aux conteneurs
shell-backend: ## Acc√®de au shell du backend
	$(DOCKER_COMPOSE) exec pokemon-backend sh

shell-frontend: ## Acc√®de au shell du frontend
	$(DOCKER_COMPOSE) exec pokemon-frontend sh

shell-db: ## Acc√®de au shell de la base de donn√©es
	$(DOCKER_COMPOSE) exec pokemon-mysql mysql -u root -p

# Base de donn√©es
db-migrate: ## Ex√©cute les migrations de base de donn√©es
	@echo "${BLUE}üîÑ Ex√©cution des migrations...${NC}"
	$(DOCKER_COMPOSE) run --rm pokemon-backend npm run prisma:migrate:deploy

db-import: ## Importe les donn√©es Pokemon
	@echo "${BLUE}üì¶ Import des donn√©es Pokemon...${NC}"
	$(DOCKER_COMPOSE) run --rm pokemon-backend npm run data:import

db-reset: ## Remet √† z√©ro la base de donn√©es
	@echo "${YELLOW}‚ö†Ô∏è  Remise √† z√©ro de la base de donn√©es...${NC}"
	$(DOCKER_COMPOSE) run --rm pokemon-backend npm run prisma:migrate:reset --force

db-studio: ## Lance Prisma Studio
	@echo "${BLUE}üé® Lancement de Prisma Studio...${NC}"
	$(DOCKER_COMPOSE) run --rm -p 5555:5555 pokemon-backend npm run prisma:studio

# Sauvegarde et restauration
backup: ## Sauvegarde la base de donn√©es
	@echo "${BLUE}üíæ Sauvegarde de la base de donn√©es...${NC}"
	@mkdir -p backups
	$(DOCKER_COMPOSE) exec pokemon-mysql mysqldump -u root -p$$MYSQL_ROOT_PASSWORD pokemon_tactics > backups/pokemon_tactics_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "${GREEN}‚úÖ Sauvegarde cr√©√©e dans backups/${NC}"

restore: ## Restaure la base de donn√©es (BACKUP_FILE=fichier.sql)
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "${RED}‚ùå Sp√©cifiez le fichier: make restore BACKUP_FILE=fichier.sql${NC}"; \
		exit 1; \
	fi
	@echo "${BLUE}üìÇ Restauration de $(BACKUP_FILE)...${NC}"
	$(DOCKER_COMPOSE) exec -T pokemon-mysql mysql -u root -p$$MYSQL_ROOT_PASSWORD pokemon_tactics < $(BACKUP_FILE)
	@echo "${GREEN}‚úÖ Base de donn√©es restaur√©e !${NC}"

# Nettoyage
clean: ## Nettoie les conteneurs arr√™t√©s et les r√©seaux inutilis√©s
	@echo "${BLUE}üßπ Nettoyage...${NC}"
	docker container prune -f
	docker network prune -f
	docker volume prune -f

prune: ## Nettoie tout (images, conteneurs, volumes, r√©seaux)
	@echo "${YELLOW}‚ö†Ô∏è  Nettoyage complet...${NC}"
	docker system prune -af --volumes

# Tests
test-backend: ## Ex√©cute les tests du backend
	$(DOCKER_COMPOSE) run --rm pokemon-backend npm test

test-frontend: ## Ex√©cute les tests du frontend
	$(DOCKER_COMPOSE) run --rm pokemon-frontend npm test

# Statut et monitoring
status: ## Affiche le statut des services
	@echo "${BLUE}üìä Statut des services:${NC}"
	$(DOCKER_COMPOSE) ps

health: ## V√©rifie la sant√© des services
	@echo "${BLUE}üè• V√©rification de la sant√©...${NC}"
	@echo "Backend: $(shell curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health || echo 'Inaccessible')"
	@echo "Frontend: $(shell curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/health || echo 'Inaccessible')"

# D√©veloppement
dev-backend: ## Lance le backend en mode d√©veloppement
	$(DOCKER_COMPOSE) run --rm -p 3001:3001 pokemon-backend npm run dev

dev-frontend: ## Lance le frontend en mode d√©veloppement
	$(DOCKER_COMPOSE) run --rm -p 3000:3000 pokemon-frontend npm run dev

# Mise √† jour
update: ## Met √† jour et red√©marre les services
	@echo "${BLUE}üîÑ Mise √† jour...${NC}"
	git pull
	$(MAKE) build
	$(MAKE) deploy

# Installation
install: ## Installation initiale compl√®te
	@echo "${BLUE}üèóÔ∏è  Installation initiale...${NC}"
	@if [ ! -f "$(ENV_FILE)" ]; then \
		cp .env.example $(ENV_FILE); \
		echo "${YELLOW}‚ö†Ô∏è  Configurez $(ENV_FILE) avant de continuer${NC}"; \
	fi
	$(MAKE) build
	$(MAKE) deploy