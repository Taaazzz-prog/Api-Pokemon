// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String    @map("password_hash")
  role            UserRole  @default(USER)
  isActive        Boolean   @default(true) @map("is_active")
  lastLoginAt     DateTime? @map("last_login_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  profile         UserProfile?
  roster          UserRoster[]
  teamPresets     TeamPreset[]
  battles         Battle[]
  survivalRuns    SurvivalRun[]
  tournaments     Tournament[]
  arenaQueue      ArenaQueue[]
  arenaMatches    ArenaMatch[]
  transactions    Transaction[]
  achievements    UserAchievement[]
  tournamentParticipants TournamentParticipant[]
  tournamentMatchesPlayer1 TournamentMatch[] @relation("player1")
  tournamentMatchesPlayer2 TournamentMatch[] @relation("player2")
  tournamentMatchesWinner  TournamentMatch[] @relation("winner")

  @@map("users")
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique @map("user_id")
  username        String    @unique
  avatar          String?
  level           Int       @default(1)
  experience      Int       @default(0)
  totalBattles    Int       @default(0) @map("total_battles")
  totalWins       Int       @default(0) @map("total_wins")
  winRate         Float     @default(0.0) @map("win_rate")
  pokeCredits     Int       @default(0) @map("poke_credits")
  pokeGems        Int       @default(0) @map("poke_gems")
  hasReceivedStarterPack Boolean @default(false) @map("has_received_starter_pack")
  settings        Json      @default("{}")
  stats           Json      @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Pokemon {
  id              Int       @id // PokeAPI ID
  nameFr          String    @map("name_fr")
  nameEn          String    @map("name_en")
  nameJp          String    @map("name_jp")
  generation      Int
  category        String?
  height          String?
  weight          String?
  hp              Int       @default(0)
  attackStat      Int       @map("attack_stat") @default(0)
  defenseStat     Int       @map("defense_stat") @default(0)
  specialAttack   Int       @map("special_attack") @default(0)
  specialDefense  Int       @map("special_defense") @default(0)
  speed           Int       @default(0)
  catchRate       Int       @map("catch_rate") @default(0)
  level100Exp     Int       @map("level_100_exp") @default(0)
  spriteRegular   String?   @map("sprite_regular")
  spriteShiny     String?   @map("sprite_shiny")
  spriteGmax      String?   @map("sprite_gmax")
  maleRate        Decimal   @map("male_rate") @default(0) @db.Decimal(5,2)
  femaleRate      Decimal   @map("female_rate") @default(0) @db.Decimal(5,2)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  userRoster      UserRoster[]
  teamMembers     TeamMember[]
  typeRelations   PokemonTypeRelation[]

  @@map("pokemon")
}

model PokemonType {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  imageUrl  String? @map("image_url")
  color     String?

  // Relations
  pokemonRelations PokemonTypeRelation[]

  @@map("pokemon_types")
}

model PokemonTypeRelation {
  pokemonId   Int @map("pokemon_id")
  typeId      Int @map("type_id") 
  slotNumber  Int @default(1) @map("slot_number")

  // Relations
  pokemon     Pokemon     @relation(fields: [pokemonId], references: [id])
  type        PokemonType @relation(fields: [typeId], references: [id])

  @@id([pokemonId, typeId])
  @@map("pokemon_type_relations")
}

model UserRoster {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  pokemonId       Int       @map("pokemon_id")
  nickname        String?
  level           Int       @default(1)
  experience      Int       @default(0)
  customStats     Json?     @map("custom_stats") // Modified stats
  obtainedFrom    String    @map("obtained_from") // "starter", "shop", "reward"
  obtainedAt      DateTime  @default(now()) @map("obtained_at")
  isLocked        Boolean   @default(false) @map("is_locked")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pokemon         Pokemon   @relation(fields: [pokemonId], references: [id])
  teamMembers     TeamMember[]

  @@unique([userId, pokemonId])
  @@map("user_roster")
}

model TeamPreset {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  name            String
  description     String?
  isActive        Boolean   @default(false) @map("is_active")
  gameMode        GameMode  @map("game_mode")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  members         TeamMember[]

  @@map("team_presets")
}

model TeamMember {
  id              String    @id @default(uuid())
  teamPresetId    String    @map("team_preset_id")
  userRosterId    String    @map("user_roster_id")
  pokemonId       Int       @map("pokemon_id")
  position        Int       // 1-6 for team position
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  teamPreset      TeamPreset @relation(fields: [teamPresetId], references: [id], onDelete: Cascade)
  userRoster      UserRoster @relation(fields: [userRosterId], references: [id])
  pokemon         Pokemon    @relation(fields: [pokemonId], references: [id])

  @@unique([teamPresetId, position])
  @@map("team_members")
}

model Battle {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  gameMode        GameMode    @map("game_mode")
  opponentType    OpponentType @map("opponent_type") // "ai", "player"
  opponentId      String?     @map("opponent_id") // User ID if PvP
  playerTeam      Json        @map("player_team") // Team composition
  opponentTeam    Json        @map("opponent_team")
  result          BattleResult
  playerScore     Int         @default(0) @map("player_score")
  opponentScore   Int         @default(0) @map("opponent_score")
  duration        Int         @default(0) // seconds
  payload         Json        @default("{}") // Battle log, rewards, etc.
  startedAt       DateTime    @default(now()) @map("started_at")
  completedAt     DateTime?   @map("completed_at")
  createdAt       DateTime    @default(now()) @map("created_at")

  // Relations
  user            User        @relation(fields: [userId], references: [id])

  @@map("battles")
}

model SurvivalRun {
  id              String       @id @default(uuid())
  userId          String       @map("user_id")
  initialTeam     Json         @map("initial_team")
  currentWave     Int          @default(1) @map("current_wave")
  maxWave         Int          @default(1) @map("max_wave")
  score           Int          @default(0)
  status          RunStatus    @default(ACTIVE)
  rewards         Json         @default("[]")
  payload         Json         @default("{}") // Run details, upgrades
  startedAt       DateTime     @default(now()) @map("started_at")
  completedAt     DateTime?    @map("completed_at")
  createdAt       DateTime     @default(now()) @map("created_at")

  // Relations
  user            User         @relation(fields: [userId], references: [id])

  @@map("survival_runs")
}

model Tournament {
  id              String          @id @default(uuid())
  userId          String          @map("user_id")
  name            String
  format          TournamentFormat
  status          TournamentStatus @default(PENDING)
  currentRound    Int             @default(1) @map("current_round")
  maxRounds       Int             @map("max_rounds")
  participants    Json            @default("[]")
  brackets        Json            @default("{}")
  rewards         Json            @default("[]")
  startedAt       DateTime?       @map("started_at")
  completedAt     DateTime?       @map("completed_at")
  createdAt       DateTime        @default(now()) @map("created_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  participantsRel TournamentParticipant[]
  matches         TournamentMatch[]

  @@map("tournaments")
}

model TournamentParticipant {
  id            String     @id @default(uuid())
  tournamentId  String     @map("tournament_id")
  userId        String     @map("user_id")
  joinedAt      DateTime   @default(now()) @map("joined_at")

  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model TournamentMatch {
  id            String                 @id @default(uuid())
  tournamentId  String                 @map("tournament_id")
  round         Int                    @default(1)
  player1Id     String?                @map("player1_id")
  player2Id     String?                @map("player2_id")
  winnerId      String?                @map("winner_id")
  status        TournamentMatchStatus  @default(PENDING)
  scheduledAt   DateTime?              @map("scheduled_at")
  completedAt   DateTime?              @map("completed_at")
  score         Json                   @default("{}")

  tournament    Tournament             @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player1       User?                  @relation("player1", fields: [player1Id], references: [id])
  player2       User?                  @relation("player2", fields: [player2Id], references: [id])
  winner        User?                  @relation("winner", fields: [winnerId], references: [id])

  @@map("tournament_matches")
}

model ArenaQueue {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  team            Json
  eloRating       Int         @default(1200) @map("elo_rating")
  rank            String      @default("Bronze") 
  queuedAt        DateTime    @default(now()) @map("queued_at")
  matchedAt       DateTime?   @map("matched_at")
  status          QueueStatus @default(WAITING)

  // Relations
  user            User        @relation(fields: [userId], references: [id])

  @@map("arena_queue")
}

model ArenaMatch {
  id           String           @id @default(uuid())
  userId       String           @map("user_id")
  opponentType ArenaOpponentType @map("opponent_type")
  opponentName String           @map("opponent_name")
  result       BattleResult
  rewardCredits Int             @default(0) @map("reward_credits")
  rewardGems   Int              @default(0) @map("reward_gems")
  createdAt    DateTime         @default(now()) @map("created_at")

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("arena_matches")
}

model Transaction {
  id              String          @id @default(uuid())
  userId          String          @map("user_id")
  type            TransactionType
  currency        Currency
  amount          Int
  balanceBefore   Int             @map("balance_before")
  balanceAfter    Int             @map("balance_after")
  source          String          // "battle_reward", "shop_purchase", etc.
  metadata        Json            @default("{}")
  createdAt       DateTime        @default(now()) @map("created_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model ShopItem {
  id              String      @id @default(uuid())
  name            String
  description     String?
  category        ShopCategory
  itemType        String      @map("item_type") // "pokemon", "upgrade", "cosmetic"
  rarity          PokemonRarity?
  priceCurrency   Currency    @map("price_currency")
  priceAmount     Int         @map("price_amount")
  isAvailable     Boolean     @default(true) @map("is_available")
  stockLimit      Int?        @map("stock_limit")
  metadata        Json        @default("{}") // Item-specific data
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("shop_items")
}

model Event {
  id              String      @id @default(uuid())
  name            String
  description     String?
  type            EventType
  isActive        Boolean     @default(true) @map("is_active")
  startDate       DateTime    @map("start_date")
  endDate         DateTime    @map("end_date")
  rewards         Json        @default("[]")
  requirements    Json        @default("{}")
  metadata        Json        @default("{}")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("events")
}

model Achievement {
  id              String      @id @default(uuid())
  name            String
  description     String
  category        AchievementCategory
  type            AchievementType
  requirements    Json        // Conditions to unlock
  rewards         Json        @default("[]")
  isHidden        Boolean     @default(false) @map("is_hidden")
  sortOrder       Int         @default(0) @map("sort_order")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  achievementId   String      @map("achievement_id")
  progress        Json        @default("{}")
  isCompleted     Boolean     @default(false) @map("is_completed")
  isClaimed       Boolean     @default(false) @map("is_claimed")
  completedAt     DateTime?   @map("completed_at")
  claimedAt       DateTime?   @map("claimed_at")
  createdAt       DateTime    @default(now()) @map("created_at")

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement     Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum PokemonRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum GameMode {
  FREE
  SURVIVAL
  TOURNAMENT
  ARENA
}

enum OpponentType {
  AI
  PLAYER
}

enum BattleResult {
  WIN
  LOSS
  DRAW
}

enum RunStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
}

enum TournamentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum QueueStatus {
  WAITING
  MATCHED
  CANCELLED
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum Currency {
  POKE_CREDITS
  POKE_GEMS
}

enum ShopCategory {
  POKEMON
  ITEMS
  COSMETICS
  BUNDLES
}

enum ArenaOpponentType {
  AI
  PLAYER
}

enum TournamentMatchStatus {
  PENDING
  COMPLETED
}

enum EventType {
  SEASONAL
  DAILY
  WEEKLY
  SPECIAL
}

enum AchievementCategory {
  BATTLE
  COLLECTION
  PROGRESSION
  SPECIAL
}

enum AchievementType {
  COUNTER
  MILESTONE
  UNLOCK
}
